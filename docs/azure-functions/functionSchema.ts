// Converter:
// - http://borischerny.com/json-schema-to-typescript-browser/
// - https://quicktype.io/typescript

// JSON Schema: http://json.schemastore.org/function
// Ref: https://learn.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp#trigger-and-binding-definitions

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ServiceBusBinding = {
    /**
     * The service bus queue to monitor (if using a queue)
     */
    queueName?: string;
    /**
     * The service bus topic to monitor (if using a queue)
     */
    topicName?: string;
    /**
     * The topic subscription name
     */
    subscriptionName?: string;
    /**
     * An app setting (or environment variable) with the service bus connection string to be used by this binding.
     */
    connection?: string;
    /**
     * The permission level of the service bus connection string used by this binding.
     */
    accessRights?: "manage" | "listen" | "send";
    [k: string]: unknown;
  } & ServiceBusBinding1;
  export type ServiceBusBinding1 =
    | {
        type?: "serviceBusTrigger";
        direction?: "in";
        [k: string]: unknown;
      }
    | {
        type?: "serviceBus";
        direction?: "out";
        [k: string]: unknown;
      };
  export type BlobBinding = {
    /**
     * The path to the blob container
     */
    path?: string;
    /**
     * An app setting (or environment variable) with the storage connection string to be used by this binding.
     */
    connection?: string;
    [k: string]: unknown;
  } & BlobBinding1;
  export type BlobBinding1 =
    | {
        type?: "blobTrigger";
        direction?: "in";
        [k: string]: unknown;
      }
    | {
        type?: "blob";
        [k: string]: unknown;
      };
  export type EventHubBinding = {
    /**
     * The event hub path.
     */
    path?: string;
    /**
     * The event hub connection string setting.
     */
    connection?: string;
    [k: string]: unknown;
  } & EventHubBinding1;
  export type EventHubBinding1 =
    | {
        type?: "eventHubTrigger";
        direction?: "in";
        /**
         * The event hub consumer group.
         */
        consumerGroup?: string;
        /**
         * The cardinality hint for the input binding parameter (single message or array of messages).
         */
        cardinality?: "one" | "many";
        [k: string]: unknown;
      }
    | {
        type?: "eventHub";
        direction?: "out";
        [k: string]: unknown;
      };
  export type QueueBinding = {
    /**
     * The queue name.
     */
    queueName?: string;
    /**
     * An app setting (or environment variable) with the storage connection string to be used by this binding.
     */
    connection?: string;
    [k: string]: unknown;
  } & QueueBinding1;
  export type QueueBinding1 =
    | {
        type?: "queueTrigger";
        direction?: "in";
        [k: string]: unknown;
      }
    | {
        type?: "queue";
        direction?: "out";
        [k: string]: unknown;
      };
  export type HttpBinding =
    | {
        type?: "httpTrigger";
        direction?: "in";
        /**
         * The function HTTP route template.
         */
        route?: string;
        /**
         * The type of WebHook handled by the trigger (if handling a pre-defined WebHook).
         */
        webHookType?: string;
        /**
         * The function HTTP authorization level.
         */
        authLevel?: "anonymous" | "function" | "admin";
        methods?: [] | ["get" | "post" | "delete" | "head" | "patch" | "put" | "options" | "trace"];
        [k: string]: unknown;
      }
    | {
        type?: "http";
        direction?: "out";
        [k: string]: unknown;
      };
  export type MobileBinding = {
    type?: "mobileTable";
    /**
     * This is the name of the table within your Mobile App to which data will be written.
     */
    tableName?: string;
    /**
     * This is the app setting name that specifies the URL of your Mobile App.
     */
    connection?: string;
    /**
     * This is app setting name that specifies the API Key for your Mobile App.
     */
    apiKey?: string;
    [k: string]: unknown;
  } & MobileBinding1;
  export type MobileBinding1 =
    | {
        direction?: "in";
        /**
         * This is the id for the record to retrieve.
         */
        id?: string;
        [k: string]: unknown;
      }
    | {
        direction?: "out";
        [k: string]: unknown;
      };
  export type DocumentDBBinding = {
    type?: "documentDB";
    /**
     * This is the connection string for your DocumentDB account.
     */
    connection?: string;
    /**
     * This is the name of the database within your DocumentDB account to which data will be written.
     */
    databaseName?: string;
    /**
     * This is the name of the collection within your database to which data will be written.
     */
    collectionName?: string;
    [k: string]: unknown;
  } & DocumentDBBinding1;
  export type DocumentDBBinding1 =
    | {
        direction?: "in";
        /**
         * This is the id for the record to retrieve.
         */
        id?: string;
        /**
         * This is the query to run against the collection.
         */
        sqlQuery?: string;
        [k: string]: unknown;
      }
    | {
        direction?: "out";
        /**
         * When true, your database and collection will be created automatically.
         */
        createIfNotExists?: boolean;
        [k: string]: unknown;
      };
  export type TableBinding = {
    type?: "table";
    /**
     * The name of the storage table.
     */
    tableName?: string;
    /**
     * The partition key.
     */
    partitionKey?: string;
    /**
     * The table row key.
     */
    rowKey?: string;
    /**
     * An app setting (or environment variable) with the storage connection string to be used by this binding.
     */
    connection?: string;
    [k: string]: unknown;
  } & TableBinding1;
  export type TableBinding1 =
    | {
        direction?: "in";
        /**
         * The number or records to retrieve.
         */
        take?: string;
        /**
         * A filter expression to be applied when retrieving rows.
         */
        filter?: string;
        [k: string]: unknown;
      }
    | {
        direction?: "out";
        [k: string]: unknown;
      };
  export type SqlBinding = {
    /**
     * The name of the app setting that contains the SQL connection string used to connect to the database.
     */
    connectionStringSetting?: string;
    [k: string]: unknown;
  } & SqlBinding1;
  export type SqlBinding1 =
    | {
        type?: "sqlTrigger";
        /**
         * The name of the table to be monitored for changes.
         */
        tableName?: string;
        [k: string]: unknown;
      }
    | {
        type?: "sql";
        direction?: "in";
        /**
         * Either a query string or the name of a stored procedure to execute.
         */
        commandText?: string;
        /**
         * Whether the commandText is a query (text) or a stored procedure (storedProcedure).
         */
        commandType?: "text" | "storedProcedure";
        /**
         * The parameters to the query or stored procedure.
         */
        parameters?: string;
        [k: string]: unknown;
      }
    | {
        type?: "sql";
        direction?: "out";
        /**
         * The name of the table into which rows will be upserted.
         */
        commandText?: string;
        [k: string]: unknown;
      };
  
  export interface JSONSchemaForAzureFunctionsFunctionJsonFiles {
    /**
     * If set to true, marks the function as disabled (it cannot be triggered).
     */
    disabled?: boolean;
    /**
     * If set to true, the function will not be loaded, compiled, or triggered.
     */
    excluded?: boolean;
    /**
     * Optional path to function script file.
     */
    scriptFile?: string;
    /**
     * Optional named entry point.
     */
    entryPoint?: string;
    /**
     * For C# precompiled functions only. If set to 'attributes', use WebJobs attributes to specify bindings. Otherwise, use the 'bindings' property of this function.json.
     */
    configurationSource?: "attributes" | "config";
    /**
     * Retry policy of function execution failures.
     */
    retry?: {
      /**
       * Retry strategy to use for retrying function executions
       */
      strategy?: "exponentialBackoff" | "fixedDelay";
      /**
       * The maximum number of retries allowed per function execution. -1 means to retry indefinitely.
       */
      maxRetryCount?: number;
      /**
       * Value indicating the delayInterval for function execution retries when using FixedDelay strategy.
       */
      delayInterval?: string | null;
      /**
       * Value indicating the minimumInterval for function execution retries when using ExponentialBackoff strategy.
       */
      minimumInterval?: string | null;
      /**
       * Value indicating the maximumInterval for function execution retries when using ExponentialBackoff strategy.
       */
      maximumInterval?: string | null;
      [k: string]: unknown;
    };
    /**
     * A list of function bindings.
     */
    bindings?: (BindingBase &
      (
        | DynamicBinding
        | (
            | ServiceBusBinding
            | BlobBinding
            | ManualTriggerBinding
            | EventHubBinding
            | TimerTriggerBinding
            | QueueBinding
            | HttpBinding
            | MobileBinding
            | DocumentDBBinding
            | TableBinding
            | NotificationHubBinding
            | TwilioSmsBinding
            | SendGridBinding
            | SqlBinding
          )
      ))[];
    [k: string]: unknown;
  }
  export interface BindingBase {
    name: string;
    type: string;
    direction: "in" | "out" | "inout";
    /**
     * The data type hint for the binding parameter (string, binary, or stream).
     */
    dataType?: "string" | "binary" | "stream";
    [k: string]: unknown;
  }
  export interface DynamicBinding {
    type?: {
      [k: string]: unknown;
    };
    direction?: "in" | "out" | "inout";
    [k: string]: unknown;
  }
  export interface ManualTriggerBinding {
    type?: "manualTrigger";
    direction?: "in";
    [k: string]: unknown;
  }
  export interface TimerTriggerBinding {
    type?: "timerTrigger";
    direction?: "in";
    /**
     * A cron expression of the format '{second} {minute} {hour} {day} {month} {day of week}' to specify the schedule.
     */
    schedule?: string;
    /**
     * When true, your timer function will be invoked immediately after a runtime restart and on-schedule thereafter.
     */
    runOnStartup?: boolean;
    /**
     * When true, schedule will be persisted to aid in maintaining the correct schedule even through restarts. Defaults to true for schedules with interval >= 1 minute.
     */
    useMonitor?: boolean;
    [k: string]: unknown;
  }
  export interface NotificationHubBinding {
    type?: "notificationHub";
    direction?: "out";
    /**
     * The tag to send the notification to.
     */
    tagExpression?: string;
    /**
     * The name of the notification hub.
     */
    hubName?: string;
    /**
     * The name of the app setting which contains the notification hub connection string.
     */
    connection?: string;
    /**
     * The notification platform to target. Sends template notification if platform is omitted.
     */
    platform?: "apns" | "adm" | "gcm" | "wns" | "mpns";
    [k: string]: unknown;
  }
  export interface TwilioSmsBinding {
    type?: "twilioSms";
    direction?: "out";
    /**
     * The name of the app setting which contains your Twilio Account Sid.
     */
    accountSid?: string;
    /**
     * The name of the app setting which contains your Twilio authentication token.
     */
    authToken?: string;
    /**
     * The phone number the SMS text is sent to.
     */
    to?: string;
    /**
     * The phone number the SMS text is sent from.
     */
    from?: string;
    /**
     * Optional body of SMS text message.
     */
    body?: string;
    [k: string]: unknown;
  }
  export interface SendGridBinding {
    type?: "sendGrid";
    direction?: "out";
    /**
     * The name of the app setting which contains your SendGrid api key.
     */
    apiKey?: string;
    /**
     * The email address to send to.
     */
    to?: string;
    /**
     * The email address to send from.
     */
    from?: string;
    /**
     * The subject of the email.
     */
    subject?: string;
    /**
     * The text of the email.
     */
    text?: string;
    [k: string]: unknown;
  }
  